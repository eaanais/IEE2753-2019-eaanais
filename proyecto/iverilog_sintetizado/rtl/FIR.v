/* Generated by Yosys 0.8+369 (git sha1 ea0e0722, gcc 7.3.0-27ubuntu1~18.04 -fPIC -Os) */

(* dynports =  1  *)
(* src = "./rtl/MAC.v:23" *)
module \$paramod\MAC\WIDTH_DATA=8\WIDTH_COEF0=8\WIDTH_MAC_OUT=8 (clk, clr, Adder, ROM, MAC_out);
  (* src = "./rtl/MAC.v:39" *)
  wire [17:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  (* src = "./rtl/MAC.v:25" *)
  input [8:0] Adder;
  (* src = "./rtl/MAC.v:27" *)
  output [7:0] MAC_out;
  (* src = "./rtl/MAC.v:26" *)
  input [7:0] ROM;
  (* src = "./rtl/MAC.v:24" *)
  input clk;
  (* src = "./rtl/MAC.v:24" *)
  input clr;
  (* init = 18'hxxx00 *)
  (* src = "./rtl/MAC.v:35" *)
  wire [17:0] salida_correcta;
  BUFX2 _188_ (
    .A(ROM[0]),
    .Y(_126_)
  );
  BUFX2 _189_ (
    .A(Adder[0]),
    .Y(_127_)
  );
  NAND2X1 _190_ (
    .A(_126_),
    .B(_127_),
    .Y(_128_)
  );
  INVX1 _191_ (
    .A(salida_correcta[0]),
    .Y(_129_)
  );
  BUFX2 _192_ (
    .A(clr),
    .Y(_130_)
  );
  NOR2X1 _193_ (
    .A(_129_),
    .B(_130_),
    .Y(_131_)
  );
  XNOR2X1 _194_ (
    .A(_128_),
    .B(_131_),
    .Y(_000_[0])
  );
  OR2X2 _195_ (
    .A(_129_),
    .B(_128_),
    .Y(_132_)
  );
  BUFX2 _196_ (
    .A(Adder[1]),
    .Y(_133_)
  );
  BUFX2 _197_ (
    .A(ROM[1]),
    .Y(_134_)
  );
  AOI22X1 _198_ (
    .A(_126_),
    .B(_133_),
    .C(_134_),
    .D(_127_),
    .Y(_135_)
  );
  NAND2X1 _199_ (
    .A(_133_),
    .B(_134_),
    .Y(_136_)
  );
  NOR2X1 _200_ (
    .A(_128_),
    .B(_136_),
    .Y(_137_)
  );
  NOR2X1 _201_ (
    .A(_135_),
    .B(_137_),
    .Y(_138_)
  );
  XNOR2X1 _202_ (
    .A(salida_correcta[1]),
    .B(_138_),
    .Y(_139_)
  );
  XNOR2X1 _203_ (
    .A(_132_),
    .B(_139_),
    .Y(_140_)
  );
  NAND2X1 _204_ (
    .A(_130_),
    .B(_138_),
    .Y(_141_)
  );
  OAI21X1 _205_ (
    .A(_130_),
    .B(_140_),
    .C(_141_),
    .Y(_000_[1])
  );
  INVX2 _206_ (
    .A(_130_),
    .Y(_142_)
  );
  NAND2X1 _207_ (
    .A(_127_),
    .B(ROM[2]),
    .Y(_143_)
  );
  NAND2X1 _208_ (
    .A(_126_),
    .B(Adder[2]),
    .Y(_144_)
  );
  XOR2X1 _209_ (
    .A(_136_),
    .B(_144_),
    .Y(_145_)
  );
  XNOR2X1 _210_ (
    .A(_143_),
    .B(_145_),
    .Y(_146_)
  );
  XNOR2X1 _211_ (
    .A(_137_),
    .B(_146_),
    .Y(_147_)
  );
  NAND2X1 _212_ (
    .A(salida_correcta[1]),
    .B(_138_),
    .Y(_148_)
  );
  OAI21X1 _213_ (
    .A(_132_),
    .B(_139_),
    .C(_148_),
    .Y(_149_)
  );
  INVX1 _214_ (
    .A(salida_correcta[2]),
    .Y(_150_)
  );
  XNOR2X1 _215_ (
    .A(_150_),
    .B(_147_),
    .Y(_151_)
  );
  XNOR2X1 _216_ (
    .A(_149_),
    .B(_151_),
    .Y(_152_)
  );
  NAND2X1 _217_ (
    .A(_142_),
    .B(_152_),
    .Y(_153_)
  );
  OAI21X1 _218_ (
    .A(_142_),
    .B(_147_),
    .C(_153_),
    .Y(_000_[2])
  );
  INVX1 _219_ (
    .A(_151_),
    .Y(_154_)
  );
  NAND2X1 _220_ (
    .A(_149_),
    .B(_154_),
    .Y(_155_)
  );
  OAI21X1 _221_ (
    .A(_150_),
    .B(_147_),
    .C(_155_),
    .Y(_156_)
  );
  NAND2X1 _222_ (
    .A(_137_),
    .B(_146_),
    .Y(_157_)
  );
  NAND2X1 _223_ (
    .A(_127_),
    .B(ROM[3]),
    .Y(_158_)
  );
  AND2X2 _224_ (
    .A(_136_),
    .B(_144_),
    .Y(_159_)
  );
  OR2X2 _225_ (
    .A(_136_),
    .B(_144_),
    .Y(_160_)
  );
  OAI21X1 _226_ (
    .A(_143_),
    .B(_159_),
    .C(_160_),
    .Y(_161_)
  );
  NAND2X1 _227_ (
    .A(_133_),
    .B(ROM[2]),
    .Y(_162_)
  );
  NAND2X1 _228_ (
    .A(_134_),
    .B(Adder[2]),
    .Y(_163_)
  );
  NAND2X1 _229_ (
    .A(_126_),
    .B(Adder[3]),
    .Y(_164_)
  );
  XOR2X1 _230_ (
    .A(_163_),
    .B(_164_),
    .Y(_165_)
  );
  XNOR2X1 _231_ (
    .A(_162_),
    .B(_165_),
    .Y(_166_)
  );
  XNOR2X1 _232_ (
    .A(_161_),
    .B(_166_),
    .Y(_167_)
  );
  XOR2X1 _233_ (
    .A(_158_),
    .B(_167_),
    .Y(_168_)
  );
  XNOR2X1 _234_ (
    .A(_157_),
    .B(_168_),
    .Y(_169_)
  );
  XNOR2X1 _235_ (
    .A(salida_correcta[3]),
    .B(_169_),
    .Y(_170_)
  );
  INVX1 _236_ (
    .A(_170_),
    .Y(_171_)
  );
  XNOR2X1 _237_ (
    .A(_156_),
    .B(_171_),
    .Y(_172_)
  );
  NAND2X1 _238_ (
    .A(_130_),
    .B(_169_),
    .Y(_173_)
  );
  OAI21X1 _239_ (
    .A(_130_),
    .B(_172_),
    .C(_173_),
    .Y(_000_[3])
  );
  NAND2X1 _240_ (
    .A(salida_correcta[3]),
    .B(_169_),
    .Y(_174_)
  );
  INVX1 _241_ (
    .A(_174_),
    .Y(_175_)
  );
  AOI21X1 _242_ (
    .A(_156_),
    .B(_171_),
    .C(_175_),
    .Y(_176_)
  );
  NAND3X1 _243_ (
    .A(_137_),
    .B(_146_),
    .C(_168_),
    .Y(_177_)
  );
  NAND2X1 _244_ (
    .A(_161_),
    .B(_166_),
    .Y(_178_)
  );
  OAI21X1 _245_ (
    .A(_158_),
    .B(_167_),
    .C(_178_),
    .Y(_179_)
  );
  NAND2X1 _246_ (
    .A(_133_),
    .B(ROM[4]),
    .Y(_180_)
  );
  NOR2X1 _247_ (
    .A(_158_),
    .B(_180_),
    .Y(_181_)
  );
  AOI22X1 _248_ (
    .A(_133_),
    .B(ROM[3]),
    .C(ROM[4]),
    .D(_127_),
    .Y(_182_)
  );
  NOR2X1 _249_ (
    .A(_181_),
    .B(_182_),
    .Y(_183_)
  );
  NAND2X1 _250_ (
    .A(_134_),
    .B(Adder[3]),
    .Y(_184_)
  );
  AND2X2 _251_ (
    .A(_163_),
    .B(_164_),
    .Y(_185_)
  );
  OAI22X1 _252_ (
    .A(_144_),
    .B(_184_),
    .C(_185_),
    .D(_162_),
    .Y(_186_)
  );
  NAND2X1 _253_ (
    .A(Adder[2]),
    .B(ROM[2]),
    .Y(_187_)
  );
  NAND2X1 _254_ (
    .A(_126_),
    .B(Adder[4]),
    .Y(_001_)
  );
  XOR2X1 _255_ (
    .A(_184_),
    .B(_001_),
    .Y(_002_)
  );
  XNOR2X1 _256_ (
    .A(_187_),
    .B(_002_),
    .Y(_003_)
  );
  XNOR2X1 _257_ (
    .A(_186_),
    .B(_003_),
    .Y(_004_)
  );
  XNOR2X1 _258_ (
    .A(_183_),
    .B(_004_),
    .Y(_005_)
  );
  XNOR2X1 _259_ (
    .A(_179_),
    .B(_005_),
    .Y(_006_)
  );
  XOR2X1 _260_ (
    .A(_177_),
    .B(_006_),
    .Y(_007_)
  );
  XNOR2X1 _261_ (
    .A(salida_correcta[4]),
    .B(_007_),
    .Y(_008_)
  );
  NOR2X1 _262_ (
    .A(_176_),
    .B(_008_),
    .Y(_009_)
  );
  NAND2X1 _263_ (
    .A(_176_),
    .B(_008_),
    .Y(_010_)
  );
  NAND2X1 _264_ (
    .A(_142_),
    .B(_010_),
    .Y(_011_)
  );
  NAND2X1 _265_ (
    .A(_130_),
    .B(_007_),
    .Y(_012_)
  );
  OAI21X1 _266_ (
    .A(_009_),
    .B(_011_),
    .C(_012_),
    .Y(_000_[4])
  );
  OR2X2 _267_ (
    .A(_158_),
    .B(_180_),
    .Y(_013_)
  );
  INVX1 _268_ (
    .A(_183_),
    .Y(_014_)
  );
  NAND2X1 _269_ (
    .A(_186_),
    .B(_003_),
    .Y(_015_)
  );
  OAI21X1 _270_ (
    .A(_014_),
    .B(_004_),
    .C(_015_),
    .Y(_016_)
  );
  NAND2X1 _271_ (
    .A(_127_),
    .B(ROM[5]),
    .Y(_017_)
  );
  NAND2X1 _272_ (
    .A(Adder[2]),
    .B(ROM[3]),
    .Y(_018_)
  );
  XOR2X1 _273_ (
    .A(_180_),
    .B(_018_),
    .Y(_019_)
  );
  XOR2X1 _274_ (
    .A(_017_),
    .B(_019_),
    .Y(_020_)
  );
  NAND2X1 _275_ (
    .A(_134_),
    .B(Adder[4]),
    .Y(_021_)
  );
  AND2X2 _276_ (
    .A(_184_),
    .B(_001_),
    .Y(_022_)
  );
  OAI22X1 _277_ (
    .A(_164_),
    .B(_021_),
    .C(_022_),
    .D(_187_),
    .Y(_023_)
  );
  NAND2X1 _278_ (
    .A(ROM[2]),
    .B(Adder[3]),
    .Y(_024_)
  );
  NAND2X1 _279_ (
    .A(_126_),
    .B(Adder[5]),
    .Y(_025_)
  );
  XOR2X1 _280_ (
    .A(_021_),
    .B(_025_),
    .Y(_026_)
  );
  XNOR2X1 _281_ (
    .A(_024_),
    .B(_026_),
    .Y(_027_)
  );
  XNOR2X1 _282_ (
    .A(_023_),
    .B(_027_),
    .Y(_028_)
  );
  XOR2X1 _283_ (
    .A(_020_),
    .B(_028_),
    .Y(_029_)
  );
  XNOR2X1 _284_ (
    .A(_016_),
    .B(_029_),
    .Y(_030_)
  );
  XNOR2X1 _285_ (
    .A(_013_),
    .B(_030_),
    .Y(_031_)
  );
  NAND2X1 _286_ (
    .A(_179_),
    .B(_005_),
    .Y(_032_)
  );
  OAI21X1 _287_ (
    .A(_177_),
    .B(_006_),
    .C(_032_),
    .Y(_033_)
  );
  XOR2X1 _288_ (
    .A(_031_),
    .B(_033_),
    .Y(_034_)
  );
  AND2X2 _289_ (
    .A(salida_correcta[4]),
    .B(_007_),
    .Y(_035_)
  );
  INVX1 _290_ (
    .A(_035_),
    .Y(_036_)
  );
  OAI21X1 _291_ (
    .A(_176_),
    .B(_008_),
    .C(_036_),
    .Y(_037_)
  );
  XNOR2X1 _292_ (
    .A(salida_correcta[5]),
    .B(_034_),
    .Y(_038_)
  );
  AND2X2 _293_ (
    .A(_037_),
    .B(_038_),
    .Y(_039_)
  );
  OAI21X1 _294_ (
    .A(_037_),
    .B(_038_),
    .C(_142_),
    .Y(_040_)
  );
  OAI22X1 _295_ (
    .A(_142_),
    .B(_034_),
    .C(_039_),
    .D(_040_),
    .Y(_000_[5])
  );
  INVX1 _296_ (
    .A(salida_correcta[5]),
    .Y(_041_)
  );
  OR2X2 _297_ (
    .A(_041_),
    .B(_034_),
    .Y(_042_)
  );
  OAI21X1 _298_ (
    .A(_035_),
    .B(_009_),
    .C(_038_),
    .Y(_043_)
  );
  BUFX2 _299_ (
    .A(salida_correcta[6]),
    .Y(_044_)
  );
  OR2X2 _300_ (
    .A(_177_),
    .B(_006_),
    .Y(_045_)
  );
  OR2X2 _301_ (
    .A(_045_),
    .B(_031_),
    .Y(_046_)
  );
  NOR2X1 _302_ (
    .A(_032_),
    .B(_031_),
    .Y(_047_)
  );
  NAND2X1 _303_ (
    .A(_016_),
    .B(_029_),
    .Y(_048_)
  );
  OAI21X1 _304_ (
    .A(_013_),
    .B(_030_),
    .C(_048_),
    .Y(_049_)
  );
  NAND2X1 _305_ (
    .A(_127_),
    .B(ROM[6]),
    .Y(_050_)
  );
  NAND3X1 _306_ (
    .A(_127_),
    .B(ROM[5]),
    .C(_019_),
    .Y(_051_)
  );
  OAI21X1 _307_ (
    .A(_180_),
    .B(_018_),
    .C(_051_),
    .Y(_052_)
  );
  XNOR2X1 _308_ (
    .A(_050_),
    .B(_052_),
    .Y(_053_)
  );
  NAND2X1 _309_ (
    .A(_023_),
    .B(_027_),
    .Y(_054_)
  );
  OAI21X1 _310_ (
    .A(_020_),
    .B(_028_),
    .C(_054_),
    .Y(_055_)
  );
  NAND2X1 _311_ (
    .A(_133_),
    .B(ROM[5]),
    .Y(_056_)
  );
  NAND2X1 _312_ (
    .A(Adder[3]),
    .B(ROM[4]),
    .Y(_057_)
  );
  NOR2X1 _313_ (
    .A(_018_),
    .B(_057_),
    .Y(_058_)
  );
  AOI22X1 _314_ (
    .A(Adder[3]),
    .B(ROM[3]),
    .C(ROM[4]),
    .D(Adder[2]),
    .Y(_059_)
  );
  NOR2X1 _315_ (
    .A(_058_),
    .B(_059_),
    .Y(_060_)
  );
  XNOR2X1 _316_ (
    .A(_056_),
    .B(_060_),
    .Y(_061_)
  );
  NAND2X1 _317_ (
    .A(_134_),
    .B(Adder[5]),
    .Y(_062_)
  );
  AND2X2 _318_ (
    .A(_021_),
    .B(_025_),
    .Y(_063_)
  );
  OAI22X1 _319_ (
    .A(_001_),
    .B(_062_),
    .C(_063_),
    .D(_024_),
    .Y(_064_)
  );
  AND2X2 _320_ (
    .A(ROM[2]),
    .B(Adder[4]),
    .Y(_065_)
  );
  NAND2X1 _321_ (
    .A(_126_),
    .B(Adder[6]),
    .Y(_066_)
  );
  XOR2X1 _322_ (
    .A(_062_),
    .B(_066_),
    .Y(_067_)
  );
  XOR2X1 _323_ (
    .A(_065_),
    .B(_067_),
    .Y(_068_)
  );
  XNOR2X1 _324_ (
    .A(_064_),
    .B(_068_),
    .Y(_069_)
  );
  XNOR2X1 _325_ (
    .A(_061_),
    .B(_069_),
    .Y(_070_)
  );
  XNOR2X1 _326_ (
    .A(_055_),
    .B(_070_),
    .Y(_071_)
  );
  XNOR2X1 _327_ (
    .A(_053_),
    .B(_071_),
    .Y(_072_)
  );
  XNOR2X1 _328_ (
    .A(_049_),
    .B(_072_),
    .Y(_073_)
  );
  XOR2X1 _329_ (
    .A(_047_),
    .B(_073_),
    .Y(_074_)
  );
  XOR2X1 _330_ (
    .A(_046_),
    .B(_074_),
    .Y(_075_)
  );
  XNOR2X1 _331_ (
    .A(_044_),
    .B(_075_),
    .Y(_076_)
  );
  AOI21X1 _332_ (
    .A(_042_),
    .B(_043_),
    .C(_076_),
    .Y(_077_)
  );
  OAI21X1 _333_ (
    .A(_041_),
    .B(_034_),
    .C(_043_),
    .Y(_078_)
  );
  XOR2X1 _334_ (
    .A(_044_),
    .B(_075_),
    .Y(_079_)
  );
  OAI21X1 _335_ (
    .A(_078_),
    .B(_079_),
    .C(_142_),
    .Y(_080_)
  );
  NAND2X1 _336_ (
    .A(_130_),
    .B(_075_),
    .Y(_081_)
  );
  OAI21X1 _337_ (
    .A(_077_),
    .B(_080_),
    .C(_081_),
    .Y(_000_[6])
  );
  AND2X2 _338_ (
    .A(_044_),
    .B(_075_),
    .Y(_082_)
  );
  OAI21X1 _339_ (
    .A(_082_),
    .B(_077_),
    .C(salida_correcta[7]),
    .Y(_083_)
  );
  INVX1 _340_ (
    .A(salida_correcta[7]),
    .Y(_084_)
  );
  NAND2X1 _341_ (
    .A(_044_),
    .B(_075_),
    .Y(_085_)
  );
  NOR2X1 _342_ (
    .A(_041_),
    .B(_034_),
    .Y(_086_)
  );
  OAI21X1 _343_ (
    .A(_086_),
    .B(_039_),
    .C(_079_),
    .Y(_087_)
  );
  NAND3X1 _344_ (
    .A(_084_),
    .B(_085_),
    .C(_087_),
    .Y(_088_)
  );
  NAND3X1 _345_ (
    .A(_142_),
    .B(_083_),
    .C(_088_),
    .Y(_089_)
  );
  INVX1 _346_ (
    .A(_073_),
    .Y(_090_)
  );
  NAND2X1 _347_ (
    .A(_047_),
    .B(_090_),
    .Y(_091_)
  );
  OAI21X1 _348_ (
    .A(_046_),
    .B(_074_),
    .C(_091_),
    .Y(_092_)
  );
  INVX1 _349_ (
    .A(_053_),
    .Y(_093_)
  );
  NAND2X1 _350_ (
    .A(_055_),
    .B(_070_),
    .Y(_094_)
  );
  OAI21X1 _351_ (
    .A(_093_),
    .B(_071_),
    .C(_094_),
    .Y(_095_)
  );
  NAND2X1 _352_ (
    .A(_064_),
    .B(_068_),
    .Y(_096_)
  );
  INVX1 _353_ (
    .A(_069_),
    .Y(_097_)
  );
  NAND2X1 _354_ (
    .A(_061_),
    .B(_097_),
    .Y(_098_)
  );
  NAND2X1 _355_ (
    .A(_096_),
    .B(_098_),
    .Y(_099_)
  );
  NAND2X1 _356_ (
    .A(ROM[2]),
    .B(Adder[5]),
    .Y(_100_)
  );
  NAND2X1 _357_ (
    .A(ROM[3]),
    .B(Adder[4]),
    .Y(_101_)
  );
  XNOR2X1 _358_ (
    .A(_057_),
    .B(_101_),
    .Y(_102_)
  );
  NAND2X1 _359_ (
    .A(_134_),
    .B(Adder[6]),
    .Y(_103_)
  );
  NAND2X1 _360_ (
    .A(_126_),
    .B(Adder[7]),
    .Y(_104_)
  );
  XNOR2X1 _361_ (
    .A(_103_),
    .B(_104_),
    .Y(_105_)
  );
  XNOR2X1 _362_ (
    .A(_102_),
    .B(_105_),
    .Y(_106_)
  );
  XNOR2X1 _363_ (
    .A(_100_),
    .B(_106_),
    .Y(_107_)
  );
  OAI22X1 _364_ (
    .A(_018_),
    .B(_057_),
    .C(_059_),
    .D(_056_),
    .Y(_108_)
  );
  NAND2X1 _365_ (
    .A(_127_),
    .B(ROM[7]),
    .Y(_109_)
  );
  NAND2X1 _366_ (
    .A(_133_),
    .B(ROM[6]),
    .Y(_110_)
  );
  XOR2X1 _367_ (
    .A(_109_),
    .B(_110_),
    .Y(_111_)
  );
  XNOR2X1 _368_ (
    .A(_108_),
    .B(_111_),
    .Y(_112_)
  );
  NAND2X1 _369_ (
    .A(Adder[2]),
    .B(ROM[5]),
    .Y(_113_)
  );
  NAND2X1 _370_ (
    .A(_065_),
    .B(_067_),
    .Y(_114_)
  );
  OAI21X1 _371_ (
    .A(_025_),
    .B(_103_),
    .C(_114_),
    .Y(_115_)
  );
  XNOR2X1 _372_ (
    .A(_113_),
    .B(_115_),
    .Y(_116_)
  );
  XNOR2X1 _373_ (
    .A(_112_),
    .B(_116_),
    .Y(_117_)
  );
  XNOR2X1 _374_ (
    .A(_107_),
    .B(_117_),
    .Y(_118_)
  );
  XNOR2X1 _375_ (
    .A(_099_),
    .B(_118_),
    .Y(_119_)
  );
  XNOR2X1 _376_ (
    .A(_095_),
    .B(_119_),
    .Y(_120_)
  );
  NAND3X1 _377_ (
    .A(_127_),
    .B(ROM[6]),
    .C(_052_),
    .Y(_121_)
  );
  NAND2X1 _378_ (
    .A(_049_),
    .B(_072_),
    .Y(_122_)
  );
  XOR2X1 _379_ (
    .A(_121_),
    .B(_122_),
    .Y(_123_)
  );
  XNOR2X1 _380_ (
    .A(_120_),
    .B(_123_),
    .Y(_124_)
  );
  XNOR2X1 _381_ (
    .A(_092_),
    .B(_124_),
    .Y(_125_)
  );
  XNOR2X1 _382_ (
    .A(_089_),
    .B(_125_),
    .Y(_000_[7])
  );
  (* src = "./rtl/MAC.v:39" *)
  DFFPOSX1 _383_ (
    .CLK(clk),
    .D(_000_[0]),
    .Q(salida_correcta[0])
  );
  (* src = "./rtl/MAC.v:39" *)
  DFFPOSX1 _384_ (
    .CLK(clk),
    .D(_000_[1]),
    .Q(salida_correcta[1])
  );
  (* src = "./rtl/MAC.v:39" *)
  DFFPOSX1 _385_ (
    .CLK(clk),
    .D(_000_[2]),
    .Q(salida_correcta[2])
  );
  (* src = "./rtl/MAC.v:39" *)
  DFFPOSX1 _386_ (
    .CLK(clk),
    .D(_000_[3]),
    .Q(salida_correcta[3])
  );
  (* src = "./rtl/MAC.v:39" *)
  DFFPOSX1 _387_ (
    .CLK(clk),
    .D(_000_[4]),
    .Q(salida_correcta[4])
  );
  (* src = "./rtl/MAC.v:39" *)
  DFFPOSX1 _388_ (
    .CLK(clk),
    .D(_000_[5]),
    .Q(salida_correcta[5])
  );
  (* src = "./rtl/MAC.v:39" *)
  DFFPOSX1 _389_ (
    .CLK(clk),
    .D(_000_[6]),
    .Q(salida_correcta[6])
  );
  (* src = "./rtl/MAC.v:39" *)
  DFFPOSX1 _390_ (
    .CLK(clk),
    .D(_000_[7]),
    .Q(salida_correcta[7])
  );
  assign MAC_out = salida_correcta[7:0];
  assign salida_correcta[17:8] = 10'h000;
endmodule

(* dynports =  1  *)
(* src = "./rtl/adder.v:2" *)
module \$paramod\adder\N=8 (clk, a, b, suma);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  (* src = "./rtl/adder.v:3" *)
  input [7:0] a;
  (* src = "./rtl/adder.v:4" *)
  input [7:0] b;
  (* src = "./rtl/adder.v:2" *)
  input clk;
  (* src = "./rtl/adder.v:5" *)
  output [8:0] suma;
  (* src = "./rtl/adder.v:8" *)
  wire [8:0] suma_previa;
  NAND2X1 _31_ (
    .A(b[0]),
    .B(a[0]),
    .Y(_00_)
  );
  XOR2X1 _32_ (
    .A(b[1]),
    .B(a[1]),
    .Y(_01_)
  );
  XNOR2X1 _33_ (
    .A(_00_),
    .B(_01_),
    .Y(suma_previa[1])
  );
  NOR2X1 _34_ (
    .A(b[1]),
    .B(a[1]),
    .Y(_02_)
  );
  NAND2X1 _35_ (
    .A(b[1]),
    .B(a[1]),
    .Y(_03_)
  );
  OAI21X1 _36_ (
    .A(_00_),
    .B(_02_),
    .C(_03_),
    .Y(_04_)
  );
  NAND2X1 _37_ (
    .A(b[2]),
    .B(a[2]),
    .Y(_05_)
  );
  OR2X2 _38_ (
    .A(b[2]),
    .B(a[2]),
    .Y(_06_)
  );
  NAND2X1 _39_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  XNOR2X1 _40_ (
    .A(_04_),
    .B(_07_),
    .Y(suma_previa[2])
  );
  AND2X2 _41_ (
    .A(b[2]),
    .B(a[2]),
    .Y(_08_)
  );
  AOI21X1 _42_ (
    .A(_04_),
    .B(_06_),
    .C(_08_),
    .Y(_09_)
  );
  XOR2X1 _43_ (
    .A(b[3]),
    .B(a[3]),
    .Y(_10_)
  );
  XNOR2X1 _44_ (
    .A(_09_),
    .B(_10_),
    .Y(suma_previa[3])
  );
  NOR2X1 _45_ (
    .A(b[3]),
    .B(a[3]),
    .Y(_11_)
  );
  NAND2X1 _46_ (
    .A(b[3]),
    .B(a[3]),
    .Y(_12_)
  );
  OAI21X1 _47_ (
    .A(_09_),
    .B(_11_),
    .C(_12_),
    .Y(_13_)
  );
  NAND2X1 _48_ (
    .A(b[4]),
    .B(a[4]),
    .Y(_14_)
  );
  OR2X2 _49_ (
    .A(b[4]),
    .B(a[4]),
    .Y(_15_)
  );
  NAND2X1 _50_ (
    .A(_14_),
    .B(_15_),
    .Y(_16_)
  );
  XNOR2X1 _51_ (
    .A(_13_),
    .B(_16_),
    .Y(suma_previa[4])
  );
  AND2X2 _52_ (
    .A(b[4]),
    .B(a[4]),
    .Y(_17_)
  );
  AOI21X1 _53_ (
    .A(_13_),
    .B(_15_),
    .C(_17_),
    .Y(_18_)
  );
  XOR2X1 _54_ (
    .A(b[5]),
    .B(a[5]),
    .Y(_19_)
  );
  XNOR2X1 _55_ (
    .A(_18_),
    .B(_19_),
    .Y(suma_previa[5])
  );
  NOR2X1 _56_ (
    .A(b[5]),
    .B(a[5]),
    .Y(_20_)
  );
  NAND2X1 _57_ (
    .A(b[5]),
    .B(a[5]),
    .Y(_21_)
  );
  OAI21X1 _58_ (
    .A(_18_),
    .B(_20_),
    .C(_21_),
    .Y(_22_)
  );
  NAND2X1 _59_ (
    .A(b[6]),
    .B(a[6]),
    .Y(_23_)
  );
  OR2X2 _60_ (
    .A(b[6]),
    .B(a[6]),
    .Y(_24_)
  );
  NAND2X1 _61_ (
    .A(_23_),
    .B(_24_),
    .Y(_25_)
  );
  XNOR2X1 _62_ (
    .A(_22_),
    .B(_25_),
    .Y(suma_previa[6])
  );
  AND2X2 _63_ (
    .A(b[6]),
    .B(a[6]),
    .Y(_26_)
  );
  AOI21X1 _64_ (
    .A(_22_),
    .B(_24_),
    .C(_26_),
    .Y(_27_)
  );
  XOR2X1 _65_ (
    .A(b[7]),
    .B(a[7]),
    .Y(_28_)
  );
  XNOR2X1 _66_ (
    .A(_27_),
    .B(_28_),
    .Y(suma_previa[7])
  );
  XOR2X1 _67_ (
    .A(b[0]),
    .B(a[0]),
    .Y(suma_previa[0])
  );
  NAND2X1 _68_ (
    .A(b[7]),
    .B(a[7]),
    .Y(_29_)
  );
  NOR2X1 _69_ (
    .A(b[7]),
    .B(a[7]),
    .Y(_30_)
  );
  AOI21X1 _70_ (
    .A(_27_),
    .B(_29_),
    .C(_30_),
    .Y(suma_previa[8])
  );
  (* src = "./rtl/adder.v:12" *)
  DFFPOSX1 _71_ (
    .CLK(clk),
    .D(suma_previa[0]),
    .Q(suma[0])
  );
  (* src = "./rtl/adder.v:12" *)
  DFFPOSX1 _72_ (
    .CLK(clk),
    .D(suma_previa[1]),
    .Q(suma[1])
  );
  (* src = "./rtl/adder.v:12" *)
  DFFPOSX1 _73_ (
    .CLK(clk),
    .D(suma_previa[2]),
    .Q(suma[2])
  );
  (* src = "./rtl/adder.v:12" *)
  DFFPOSX1 _74_ (
    .CLK(clk),
    .D(suma_previa[3]),
    .Q(suma[3])
  );
  (* src = "./rtl/adder.v:12" *)
  DFFPOSX1 _75_ (
    .CLK(clk),
    .D(suma_previa[4]),
    .Q(suma[4])
  );
  (* src = "./rtl/adder.v:12" *)
  DFFPOSX1 _76_ (
    .CLK(clk),
    .D(suma_previa[5]),
    .Q(suma[5])
  );
  (* src = "./rtl/adder.v:12" *)
  DFFPOSX1 _77_ (
    .CLK(clk),
    .D(suma_previa[6]),
    .Q(suma[6])
  );
  (* src = "./rtl/adder.v:12" *)
  DFFPOSX1 _78_ (
    .CLK(clk),
    .D(suma_previa[7]),
    .Q(suma[7])
  );
  (* src = "./rtl/adder.v:12" *)
  DFFPOSX1 _79_ (
    .CLK(clk),
    .D(suma_previa[8]),
    .Q(suma[8])
  );
endmodule

(* dynports =  1  *)
(* src = "./rtl/asr8.v:3" *)
module \$paramod\asr8\WIDTH_DATA=8\N_TAPS=8 (clk, clr, en, add, d, q);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  (* src = "./rtl/asr8.v:4" *)
  input [2:0] add;
  (* src = "./rtl/asr8.v:3" *)
  wire [7:0] \cables[0] ;
  (* src = "./rtl/asr8.v:3" *)
  wire [7:0] \cables[1] ;
  (* src = "./rtl/asr8.v:3" *)
  wire [7:0] \cables[2] ;
  (* src = "./rtl/asr8.v:3" *)
  wire [7:0] \cables[3] ;
  (* src = "./rtl/asr8.v:3" *)
  wire [7:0] \cables[4] ;
  (* src = "./rtl/asr8.v:3" *)
  wire [7:0] \cables[5] ;
  (* src = "./rtl/asr8.v:3" *)
  wire [7:0] \cables[6] ;
  (* src = "./rtl/asr8.v:3" *)
  wire [7:0] \cables[7] ;
  (* src = "./rtl/asr8.v:3" *)
  wire [7:0] \cables[8] ;
  (* src = "./rtl/asr8.v:3" *)
  input clk;
  (* src = "./rtl/asr8.v:3" *)
  input clr;
  (* src = "./rtl/asr8.v:5" *)
  input [7:0] d;
  (* src = "./rtl/asr8.v:3" *)
  input en;
  (* src = "./rtl/asr8.v:6" *)
  output [7:0] q;
  BUFX2 _095_ (
    .A(add[2]),
    .Y(_079_)
  );
  BUFX2 _096_ (
    .A(add[0]),
    .Y(_080_)
  );
  INVX1 _097_ (
    .A(add[1]),
    .Y(_081_)
  );
  NAND2X1 _098_ (
    .A(_080_),
    .B(_081_),
    .Y(_082_)
  );
  NOR2X1 _099_ (
    .A(_079_),
    .B(_082_),
    .Y(_083_)
  );
  NAND2X1 _100_ (
    .A(_080_),
    .B(add[1]),
    .Y(_084_)
  );
  NOR2X1 _101_ (
    .A(_079_),
    .B(_084_),
    .Y(_085_)
  );
  BUFX2 _102_ (
    .A(_085_),
    .Y(_086_)
  );
  AOI22X1 _103_ (
    .A(\cables[2] [0]),
    .B(_083_),
    .C(_086_),
    .D(\cables[4] [0]),
    .Y(_087_)
  );
  INVX1 _104_ (
    .A(_079_),
    .Y(_088_)
  );
  NOR2X1 _105_ (
    .A(_088_),
    .B(_082_),
    .Y(_089_)
  );
  NOR2X1 _106_ (
    .A(_080_),
    .B(_081_),
    .Y(_090_)
  );
  AND2X2 _107_ (
    .A(_088_),
    .B(_090_),
    .Y(_091_)
  );
  BUFX2 _108_ (
    .A(_091_),
    .Y(_092_)
  );
  AOI22X1 _109_ (
    .A(\cables[6] [0]),
    .B(_089_),
    .C(_092_),
    .D(\cables[3] [0]),
    .Y(_093_)
  );
  INVX1 _110_ (
    .A(\cables[7] [0]),
    .Y(_094_)
  );
  INVX1 _111_ (
    .A(_080_),
    .Y(_000_)
  );
  NAND3X1 _112_ (
    .A(_000_),
    .B(add[1]),
    .C(_079_),
    .Y(_001_)
  );
  NOR3X1 _113_ (
    .A(_080_),
    .B(add[1]),
    .C(_079_),
    .Y(_002_)
  );
  NAND2X1 _114_ (
    .A(\cables[1] [0]),
    .B(_002_),
    .Y(_003_)
  );
  OAI21X1 _115_ (
    .A(_094_),
    .B(_001_),
    .C(_003_),
    .Y(_004_)
  );
  INVX1 _116_ (
    .A(\cables[5] [0]),
    .Y(_005_)
  );
  NAND3X1 _117_ (
    .A(_000_),
    .B(_081_),
    .C(_079_),
    .Y(_006_)
  );
  BUFX2 _118_ (
    .A(_006_),
    .Y(_007_)
  );
  OR2X2 _119_ (
    .A(_088_),
    .B(_084_),
    .Y(_008_)
  );
  INVX1 _120_ (
    .A(\cables[8] [0]),
    .Y(_009_)
  );
  OAI22X1 _121_ (
    .A(_005_),
    .B(_007_),
    .C(_008_),
    .D(_009_),
    .Y(_010_)
  );
  NOR2X1 _122_ (
    .A(_004_),
    .B(_010_),
    .Y(_011_)
  );
  NAND3X1 _123_ (
    .A(_087_),
    .B(_093_),
    .C(_011_),
    .Y(q[0])
  );
  AOI22X1 _124_ (
    .A(\cables[4] [1]),
    .B(_086_),
    .C(_092_),
    .D(\cables[3] [1]),
    .Y(_012_)
  );
  INVX1 _125_ (
    .A(\cables[5] [1]),
    .Y(_013_)
  );
  NAND3X1 _126_ (
    .A(_080_),
    .B(_081_),
    .C(_079_),
    .Y(_014_)
  );
  INVX1 _127_ (
    .A(\cables[6] [1]),
    .Y(_015_)
  );
  OAI22X1 _128_ (
    .A(_013_),
    .B(_007_),
    .C(_014_),
    .D(_015_),
    .Y(_016_)
  );
  AOI21X1 _129_ (
    .A(\cables[2] [1]),
    .B(_083_),
    .C(_016_),
    .Y(_017_)
  );
  AND2X2 _130_ (
    .A(_079_),
    .B(_090_),
    .Y(_018_)
  );
  INVX1 _131_ (
    .A(\cables[8] [1]),
    .Y(_019_)
  );
  NAND2X1 _132_ (
    .A(\cables[1] [1]),
    .B(_002_),
    .Y(_020_)
  );
  OAI21X1 _133_ (
    .A(_019_),
    .B(_008_),
    .C(_020_),
    .Y(_021_)
  );
  AOI21X1 _134_ (
    .A(\cables[7] [1]),
    .B(_018_),
    .C(_021_),
    .Y(_022_)
  );
  NAND3X1 _135_ (
    .A(_012_),
    .B(_017_),
    .C(_022_),
    .Y(q[1])
  );
  AOI22X1 _136_ (
    .A(\cables[2] [2]),
    .B(_083_),
    .C(_086_),
    .D(\cables[4] [2]),
    .Y(_023_)
  );
  AOI22X1 _137_ (
    .A(\cables[7] [2]),
    .B(_018_),
    .C(_092_),
    .D(\cables[3] [2]),
    .Y(_024_)
  );
  INVX1 _138_ (
    .A(\cables[6] [2]),
    .Y(_025_)
  );
  NAND2X1 _139_ (
    .A(\cables[1] [2]),
    .B(_002_),
    .Y(_026_)
  );
  OAI21X1 _140_ (
    .A(_025_),
    .B(_014_),
    .C(_026_),
    .Y(_027_)
  );
  INVX1 _141_ (
    .A(\cables[5] [2]),
    .Y(_028_)
  );
  INVX1 _142_ (
    .A(\cables[8] [2]),
    .Y(_029_)
  );
  OAI22X1 _143_ (
    .A(_028_),
    .B(_007_),
    .C(_008_),
    .D(_029_),
    .Y(_030_)
  );
  NOR2X1 _144_ (
    .A(_027_),
    .B(_030_),
    .Y(_031_)
  );
  NAND3X1 _145_ (
    .A(_023_),
    .B(_024_),
    .C(_031_),
    .Y(q[2])
  );
  INVX1 _146_ (
    .A(\cables[7] [3]),
    .Y(_032_)
  );
  INVX1 _147_ (
    .A(\cables[5] [3]),
    .Y(_033_)
  );
  OAI22X1 _148_ (
    .A(_032_),
    .B(_001_),
    .C(_007_),
    .D(_033_),
    .Y(_034_)
  );
  AOI21X1 _149_ (
    .A(\cables[3] [3]),
    .B(_092_),
    .C(_034_),
    .Y(_035_)
  );
  INVX1 _150_ (
    .A(\cables[8] [3]),
    .Y(_036_)
  );
  NAND2X1 _151_ (
    .A(\cables[1] [3]),
    .B(_002_),
    .Y(_037_)
  );
  OAI21X1 _152_ (
    .A(_036_),
    .B(_008_),
    .C(_037_),
    .Y(_038_)
  );
  AOI21X1 _153_ (
    .A(\cables[4] [3]),
    .B(_086_),
    .C(_038_),
    .Y(_039_)
  );
  AOI22X1 _154_ (
    .A(\cables[2] [3]),
    .B(_083_),
    .C(_089_),
    .D(\cables[6] [3]),
    .Y(_040_)
  );
  NAND3X1 _155_ (
    .A(_035_),
    .B(_039_),
    .C(_040_),
    .Y(q[3])
  );
  AOI22X1 _156_ (
    .A(\cables[4] [4]),
    .B(_086_),
    .C(_018_),
    .D(\cables[7] [4]),
    .Y(_041_)
  );
  AOI22X1 _157_ (
    .A(\cables[6] [4]),
    .B(_089_),
    .C(_092_),
    .D(\cables[3] [4]),
    .Y(_042_)
  );
  INVX1 _158_ (
    .A(\cables[2] [4]),
    .Y(_043_)
  );
  NAND3X1 _159_ (
    .A(_080_),
    .B(_081_),
    .C(_088_),
    .Y(_044_)
  );
  NAND2X1 _160_ (
    .A(\cables[1] [4]),
    .B(_002_),
    .Y(_045_)
  );
  OAI21X1 _161_ (
    .A(_043_),
    .B(_044_),
    .C(_045_),
    .Y(_046_)
  );
  INVX1 _162_ (
    .A(\cables[5] [4]),
    .Y(_047_)
  );
  INVX1 _163_ (
    .A(\cables[8] [4]),
    .Y(_048_)
  );
  OAI22X1 _164_ (
    .A(_047_),
    .B(_007_),
    .C(_008_),
    .D(_048_),
    .Y(_049_)
  );
  NOR2X1 _165_ (
    .A(_046_),
    .B(_049_),
    .Y(_050_)
  );
  NAND3X1 _166_ (
    .A(_041_),
    .B(_042_),
    .C(_050_),
    .Y(q[4])
  );
  AOI22X1 _167_ (
    .A(\cables[2] [5]),
    .B(_083_),
    .C(_018_),
    .D(\cables[7] [5]),
    .Y(_051_)
  );
  INVX1 _168_ (
    .A(\cables[5] [5]),
    .Y(_052_)
  );
  INVX1 _169_ (
    .A(\cables[6] [5]),
    .Y(_053_)
  );
  OAI22X1 _170_ (
    .A(_052_),
    .B(_007_),
    .C(_014_),
    .D(_053_),
    .Y(_054_)
  );
  AOI21X1 _171_ (
    .A(\cables[3] [5]),
    .B(_092_),
    .C(_054_),
    .Y(_055_)
  );
  INVX1 _172_ (
    .A(\cables[8] [5]),
    .Y(_056_)
  );
  NAND2X1 _173_ (
    .A(\cables[1] [5]),
    .B(_002_),
    .Y(_057_)
  );
  OAI21X1 _174_ (
    .A(_056_),
    .B(_008_),
    .C(_057_),
    .Y(_058_)
  );
  AOI21X1 _175_ (
    .A(\cables[4] [5]),
    .B(_086_),
    .C(_058_),
    .Y(_059_)
  );
  NAND3X1 _176_ (
    .A(_051_),
    .B(_055_),
    .C(_059_),
    .Y(q[5])
  );
  INVX1 _177_ (
    .A(_008_),
    .Y(_060_)
  );
  AOI22X1 _178_ (
    .A(\cables[4] [6]),
    .B(_086_),
    .C(_060_),
    .D(\cables[8] [6]),
    .Y(_061_)
  );
  AOI22X1 _179_ (
    .A(\cables[6] [6]),
    .B(_089_),
    .C(_092_),
    .D(\cables[3] [6]),
    .Y(_062_)
  );
  INVX1 _180_ (
    .A(\cables[2] [6]),
    .Y(_063_)
  );
  INVX1 _181_ (
    .A(\cables[7] [6]),
    .Y(_064_)
  );
  OAI22X1 _182_ (
    .A(_063_),
    .B(_044_),
    .C(_001_),
    .D(_064_),
    .Y(_065_)
  );
  INVX1 _183_ (
    .A(\cables[5] [6]),
    .Y(_066_)
  );
  NAND2X1 _184_ (
    .A(\cables[1] [6]),
    .B(_002_),
    .Y(_067_)
  );
  OAI21X1 _185_ (
    .A(_066_),
    .B(_007_),
    .C(_067_),
    .Y(_068_)
  );
  NOR2X1 _186_ (
    .A(_065_),
    .B(_068_),
    .Y(_069_)
  );
  NAND3X1 _187_ (
    .A(_061_),
    .B(_062_),
    .C(_069_),
    .Y(q[6])
  );
  AOI22X1 _188_ (
    .A(\cables[2] [7]),
    .B(_083_),
    .C(_092_),
    .D(\cables[3] [7]),
    .Y(_070_)
  );
  AOI22X1 _189_ (
    .A(\cables[4] [7]),
    .B(_086_),
    .C(_060_),
    .D(\cables[8] [7]),
    .Y(_071_)
  );
  INVX1 _190_ (
    .A(\cables[7] [7]),
    .Y(_072_)
  );
  INVX1 _191_ (
    .A(\cables[5] [7]),
    .Y(_073_)
  );
  OAI22X1 _192_ (
    .A(_072_),
    .B(_001_),
    .C(_007_),
    .D(_073_),
    .Y(_074_)
  );
  INVX1 _193_ (
    .A(\cables[6] [7]),
    .Y(_075_)
  );
  NAND2X1 _194_ (
    .A(\cables[1] [7]),
    .B(_002_),
    .Y(_076_)
  );
  OAI21X1 _195_ (
    .A(_075_),
    .B(_014_),
    .C(_076_),
    .Y(_077_)
  );
  NOR2X1 _196_ (
    .A(_074_),
    .B(_077_),
    .Y(_078_)
  );
  NAND3X1 _197_ (
    .A(_070_),
    .B(_071_),
    .C(_078_),
    .Y(q[7])
  );
  (* src = "./rtl/asr8.v:21" *)
  \$paramod\register\N=8  _198_ (
    .clk(clk),
    .clr(clr),
    .d(d),
    .en(en),
    .q(\cables[1] )
  );
  (* src = "./rtl/asr8.v:21" *)
  \$paramod\register\N=8  _199_ (
    .clk(clk),
    .clr(clr),
    .d(\cables[1] ),
    .en(en),
    .q(\cables[2] )
  );
  (* src = "./rtl/asr8.v:21" *)
  \$paramod\register\N=8  _200_ (
    .clk(clk),
    .clr(clr),
    .d(\cables[2] ),
    .en(en),
    .q(\cables[3] )
  );
  (* src = "./rtl/asr8.v:21" *)
  \$paramod\register\N=8  _201_ (
    .clk(clk),
    .clr(clr),
    .d(\cables[3] ),
    .en(en),
    .q(\cables[4] )
  );
  (* src = "./rtl/asr8.v:21" *)
  \$paramod\register\N=8  _202_ (
    .clk(clk),
    .clr(clr),
    .d(\cables[4] ),
    .en(en),
    .q(\cables[5] )
  );
  (* src = "./rtl/asr8.v:21" *)
  \$paramod\register\N=8  _203_ (
    .clk(clk),
    .clr(clr),
    .d(\cables[5] ),
    .en(en),
    .q(\cables[6] )
  );
  (* src = "./rtl/asr8.v:21" *)
  \$paramod\register\N=8  _204_ (
    .clk(clk),
    .clr(clr),
    .d(\cables[6] ),
    .en(en),
    .q(\cables[7] )
  );
  (* src = "./rtl/asr8.v:21" *)
  \$paramod\register\N=8  _205_ (
    .clk(clk),
    .clr(clr),
    .d(\cables[7] ),
    .en(en),
    .q(\cables[8] )
  );
  assign \cables[0]  = d;
endmodule

(* dynports =  1  *)
(* src = "./rtl/counter_down.v:2" *)
module \$paramod\counter_down\N=3 (clk, clr, counter);
  (* src = "./rtl/counter_down.v:9" *)
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  (* src = "./rtl/counter_down.v:2" *)
  input clk;
  (* src = "./rtl/counter_down.v:2" *)
  input clr;
  (* init = 3'h7 *)
  (* src = "./rtl/counter_down.v:4" *)
  wire [2:0] contador;
  (* src = "./rtl/counter_down.v:2" *)
  output [2:0] counter;
  AOI21X1 _05_ (
    .A(contador[1]),
    .B(contador[0]),
    .C(clr),
    .Y(_04_)
  );
  OAI21X1 _06_ (
    .A(contador[1]),
    .B(contador[0]),
    .C(_04_),
    .Y(_00_[1])
  );
  OR2X2 _07_ (
    .A(contador[1]),
    .B(contador[0]),
    .Y(_01_)
  );
  AOI21X1 _08_ (
    .A(contador[2]),
    .B(_01_),
    .C(clr),
    .Y(_02_)
  );
  OAI21X1 _09_ (
    .A(contador[2]),
    .B(_01_),
    .C(_02_),
    .Y(_00_[2])
  );
  INVX1 _10_ (
    .A(clr),
    .Y(_03_)
  );
  NAND2X1 _11_ (
    .A(contador[0]),
    .B(_03_),
    .Y(_00_[0])
  );
  (* src = "./rtl/counter_down.v:9" *)
  DFFPOSX1 _12_ (
    .CLK(clk),
    .D(_00_[0]),
    .Q(contador[0])
  );
  (* src = "./rtl/counter_down.v:9" *)
  DFFPOSX1 _13_ (
    .CLK(clk),
    .D(_00_[1]),
    .Q(contador[1])
  );
  (* src = "./rtl/counter_down.v:9" *)
  DFFPOSX1 _14_ (
    .CLK(clk),
    .D(_00_[2]),
    .Q(contador[2])
  );
  assign counter = contador;
endmodule

(* dynports =  1  *)
(* src = "./rtl/counter_up.v:2" *)
module \$paramod\counter_up\N=3 (clk, clr, counter);
  (* src = "./rtl/counter_up.v:7" *)
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  (* src = "./rtl/counter_up.v:2" *)
  input clk;
  (* src = "./rtl/counter_up.v:2" *)
  input clr;
  (* init = 3'h0 *)
  (* src = "./rtl/counter_up.v:4" *)
  wire [2:0] contador;
  (* src = "./rtl/counter_up.v:2" *)
  output [2:0] counter;
  INVX1 _05_ (
    .A(clr),
    .Y(_03_)
  );
  OAI21X1 _06_ (
    .A(contador[0]),
    .B(contador[1]),
    .C(_03_),
    .Y(_04_)
  );
  AOI21X1 _07_ (
    .A(contador[0]),
    .B(contador[1]),
    .C(_04_),
    .Y(_00_[1])
  );
  NAND2X1 _08_ (
    .A(contador[0]),
    .B(contador[1]),
    .Y(_01_)
  );
  XOR2X1 _09_ (
    .A(contador[2]),
    .B(_01_),
    .Y(_02_)
  );
  NOR2X1 _10_ (
    .A(clr),
    .B(_02_),
    .Y(_00_[2])
  );
  NOR2X1 _11_ (
    .A(clr),
    .B(contador[0]),
    .Y(_00_[0])
  );
  (* src = "./rtl/counter_up.v:7" *)
  DFFPOSX1 _12_ (
    .CLK(clk),
    .D(_00_[0]),
    .Q(contador[0])
  );
  (* src = "./rtl/counter_up.v:7" *)
  DFFPOSX1 _13_ (
    .CLK(clk),
    .D(_00_[1]),
    .Q(contador[1])
  );
  (* src = "./rtl/counter_up.v:7" *)
  DFFPOSX1 _14_ (
    .CLK(clk),
    .D(_00_[2]),
    .Q(contador[2])
  );
  assign counter = contador;
endmodule

(* dynports =  1  *)
(* src = "./rtl/divisor_clock.v:23" *)
module \$paramod\divisor_clock\N_TAPS=16 (rst, clock_in, clock_out);
  (* src = "./rtl/divisor_clock.v:29" *)
  wire [3:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  (* src = "./rtl/divisor_clock.v:23" *)
  input clock_in;
  (* src = "./rtl/divisor_clock.v:23" *)
  output clock_out;
  (* init = 4'h0 *)
  (* src = "./rtl/divisor_clock.v:27" *)
  wire [3:0] counter;
  (* src = "./rtl/divisor_clock.v:23" *)
  input rst;
  BUFX2 _08_ (
    .A(counter[0]),
    .Y(_01_)
  );
  INVX1 _09_ (
    .A(rst),
    .Y(_02_)
  );
  OAI21X1 _10_ (
    .A(counter[1]),
    .B(_01_),
    .C(_02_),
    .Y(_03_)
  );
  AOI21X1 _11_ (
    .A(counter[1]),
    .B(_01_),
    .C(_03_),
    .Y(_00_[1])
  );
  AOI21X1 _12_ (
    .A(counter[1]),
    .B(_01_),
    .C(counter[2]),
    .Y(_04_)
  );
  NAND3X1 _13_ (
    .A(counter[1]),
    .B(_01_),
    .C(counter[2]),
    .Y(_05_)
  );
  NAND2X1 _14_ (
    .A(_02_),
    .B(_05_),
    .Y(_06_)
  );
  NOR2X1 _15_ (
    .A(_04_),
    .B(_06_),
    .Y(_00_[2])
  );
  INVX1 _16_ (
    .A(counter[3]),
    .Y(clock_out)
  );
  OAI21X1 _17_ (
    .A(clock_out),
    .B(_05_),
    .C(_02_),
    .Y(_07_)
  );
  AOI21X1 _18_ (
    .A(clock_out),
    .B(_05_),
    .C(_07_),
    .Y(_00_[3])
  );
  NOR2X1 _19_ (
    .A(rst),
    .B(_01_),
    .Y(_00_[0])
  );
  (* src = "./rtl/divisor_clock.v:29" *)
  DFFPOSX1 _20_ (
    .CLK(clock_in),
    .D(_00_[0]),
    .Q(counter[0])
  );
  (* src = "./rtl/divisor_clock.v:29" *)
  DFFPOSX1 _21_ (
    .CLK(clock_in),
    .D(_00_[1]),
    .Q(counter[1])
  );
  (* src = "./rtl/divisor_clock.v:29" *)
  DFFPOSX1 _22_ (
    .CLK(clock_in),
    .D(_00_[2]),
    .Q(counter[2])
  );
  (* src = "./rtl/divisor_clock.v:29" *)
  DFFPOSX1 _23_ (
    .CLK(clock_in),
    .D(_00_[3]),
    .Q(counter[3])
  );
endmodule

(* dynports =  1  *)
(* src = "./rtl/register.v:2" *)
module \$paramod\register\N=1 (clk, clr, en, d, q);
  (* src = "./rtl/register.v:8" *)
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  (* src = "./rtl/register.v:2" *)
  input clk;
  (* src = "./rtl/register.v:2" *)
  input clr;
  (* src = "./rtl/register.v:3" *)
  input d;
  (* src = "./rtl/register.v:2" *)
  input en;
  (* src = "./rtl/register.v:4" *)
  output q;
  INVX1 _4_ (
    .A(clr),
    .Y(_1_)
  );
  INVX1 _5_ (
    .A(q),
    .Y(_2_)
  );
  NAND2X1 _6_ (
    .A(d),
    .B(en),
    .Y(_3_)
  );
  OAI21X1 _7_ (
    .A(_2_),
    .B(en),
    .C(_3_),
    .Y(_0_)
  );
  (* src = "./rtl/register.v:8" *)
  DFFSR _8_ (
    .CLK(clk),
    .D(_0_),
    .Q(q),
    .R(_1_),
    .S(1'h1)
  );
endmodule

(* dynports =  1  *)
(* src = "./rtl/register.v:2" *)
module \$paramod\register\N=8 (clk, clr, en, d, q);
  (* src = "./rtl/register.v:8" *)
  wire [7:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  (* src = "./rtl/register.v:2" *)
  input clk;
  (* src = "./rtl/register.v:2" *)
  input clr;
  (* src = "./rtl/register.v:3" *)
  input [7:0] d;
  (* src = "./rtl/register.v:2" *)
  input en;
  (* src = "./rtl/register.v:4" *)
  output [7:0] q;
  INVX1 _27_ (
    .A(clr),
    .Y(_07_)
  );
  INVX1 _28_ (
    .A(q[1]),
    .Y(_08_)
  );
  BUFX2 _29_ (
    .A(en),
    .Y(_09_)
  );
  BUFX2 _30_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND2X1 _31_ (
    .A(d[1]),
    .B(_10_),
    .Y(_11_)
  );
  OAI21X1 _32_ (
    .A(_08_),
    .B(_10_),
    .C(_11_),
    .Y(_00_[1])
  );
  INVX1 _33_ (
    .A(q[2]),
    .Y(_12_)
  );
  NAND2X1 _34_ (
    .A(_10_),
    .B(d[2]),
    .Y(_13_)
  );
  OAI21X1 _35_ (
    .A(_10_),
    .B(_12_),
    .C(_13_),
    .Y(_00_[2])
  );
  INVX1 _36_ (
    .A(q[3]),
    .Y(_14_)
  );
  NAND2X1 _37_ (
    .A(_09_),
    .B(d[3]),
    .Y(_15_)
  );
  OAI21X1 _38_ (
    .A(_10_),
    .B(_14_),
    .C(_15_),
    .Y(_00_[3])
  );
  INVX1 _39_ (
    .A(q[4]),
    .Y(_16_)
  );
  NAND2X1 _40_ (
    .A(_09_),
    .B(d[4]),
    .Y(_17_)
  );
  OAI21X1 _41_ (
    .A(_10_),
    .B(_16_),
    .C(_17_),
    .Y(_00_[4])
  );
  INVX1 _42_ (
    .A(q[5]),
    .Y(_18_)
  );
  NAND2X1 _43_ (
    .A(_09_),
    .B(d[5]),
    .Y(_19_)
  );
  OAI21X1 _44_ (
    .A(_10_),
    .B(_18_),
    .C(_19_),
    .Y(_00_[5])
  );
  INVX1 _45_ (
    .A(q[6]),
    .Y(_20_)
  );
  NAND2X1 _46_ (
    .A(_09_),
    .B(d[6]),
    .Y(_21_)
  );
  OAI21X1 _47_ (
    .A(_10_),
    .B(_20_),
    .C(_21_),
    .Y(_00_[6])
  );
  INVX1 _48_ (
    .A(q[7]),
    .Y(_22_)
  );
  NAND2X1 _49_ (
    .A(_09_),
    .B(d[7]),
    .Y(_23_)
  );
  OAI21X1 _50_ (
    .A(_10_),
    .B(_22_),
    .C(_23_),
    .Y(_00_[7])
  );
  INVX1 _51_ (
    .A(q[0]),
    .Y(_24_)
  );
  NAND2X1 _52_ (
    .A(_09_),
    .B(d[0]),
    .Y(_25_)
  );
  OAI21X1 _53_ (
    .A(_10_),
    .B(_24_),
    .C(_25_),
    .Y(_00_[0])
  );
  INVX1 _54_ (
    .A(clr),
    .Y(_26_)
  );
  INVX1 _55_ (
    .A(clr),
    .Y(_01_)
  );
  INVX1 _56_ (
    .A(clr),
    .Y(_02_)
  );
  INVX1 _57_ (
    .A(clr),
    .Y(_03_)
  );
  INVX1 _58_ (
    .A(clr),
    .Y(_04_)
  );
  INVX1 _59_ (
    .A(clr),
    .Y(_05_)
  );
  INVX1 _60_ (
    .A(clr),
    .Y(_06_)
  );
  (* src = "./rtl/register.v:8" *)
  DFFSR _61_ (
    .CLK(clk),
    .D(_00_[0]),
    .Q(q[0]),
    .R(_26_),
    .S(1'h1)
  );
  (* src = "./rtl/register.v:8" *)
  DFFSR _62_ (
    .CLK(clk),
    .D(_00_[1]),
    .Q(q[1]),
    .R(_01_),
    .S(1'h1)
  );
  (* src = "./rtl/register.v:8" *)
  DFFSR _63_ (
    .CLK(clk),
    .D(_00_[2]),
    .Q(q[2]),
    .R(_02_),
    .S(1'h1)
  );
  (* src = "./rtl/register.v:8" *)
  DFFSR _64_ (
    .CLK(clk),
    .D(_00_[3]),
    .Q(q[3]),
    .R(_03_),
    .S(1'h1)
  );
  (* src = "./rtl/register.v:8" *)
  DFFSR _65_ (
    .CLK(clk),
    .D(_00_[4]),
    .Q(q[4]),
    .R(_04_),
    .S(1'h1)
  );
  (* src = "./rtl/register.v:8" *)
  DFFSR _66_ (
    .CLK(clk),
    .D(_00_[5]),
    .Q(q[5]),
    .R(_05_),
    .S(1'h1)
  );
  (* src = "./rtl/register.v:8" *)
  DFFSR _67_ (
    .CLK(clk),
    .D(_00_[6]),
    .Q(q[6]),
    .R(_06_),
    .S(1'h1)
  );
  (* src = "./rtl/register.v:8" *)
  DFFSR _68_ (
    .CLK(clk),
    .D(_00_[7]),
    .Q(q[7]),
    .R(_07_),
    .S(1'h1)
  );
endmodule

(* dynports =  1  *)
(* src = "./rtl/retardo_N.v:5" *)
module \$paramod\retardo_N\WIDTH_DELAY=10\WIDTH_DATA=1 (clk, reset, enable, data_in, data_out);
  (* src = "./rtl/retardo_N.v:5" *)
  input clk;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[0] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[10] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[1] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[2] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[3] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[4] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[5] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[6] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[7] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[8] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[9] ;
  (* src = "./rtl/retardo_N.v:8" *)
  input data_in;
  (* src = "./rtl/retardo_N.v:9" *)
  output data_out;
  (* src = "./rtl/retardo_N.v:7" *)
  input enable;
  (* src = "./rtl/retardo_N.v:6" *)
  input reset;
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _0_ (
    .clk(clk),
    .clr(reset),
    .d(data_in),
    .en(enable),
    .q(\connect_wire[1] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _1_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[1] ),
    .en(enable),
    .q(\connect_wire[2] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _2_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[2] ),
    .en(enable),
    .q(\connect_wire[3] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _3_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[3] ),
    .en(enable),
    .q(\connect_wire[4] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _4_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[4] ),
    .en(enable),
    .q(\connect_wire[5] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _5_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[5] ),
    .en(enable),
    .q(\connect_wire[6] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _6_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[6] ),
    .en(enable),
    .q(\connect_wire[7] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _7_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[7] ),
    .en(enable),
    .q(\connect_wire[8] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _8_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[8] ),
    .en(enable),
    .q(\connect_wire[9] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _9_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[9] ),
    .en(enable),
    .q(\connect_wire[10] )
  );
  assign \connect_wire[0]  = data_in;
  assign data_out = \connect_wire[10] ;
endmodule

(* dynports =  1  *)
(* src = "./rtl/retardo_N.v:5" *)
module \$paramod\retardo_N\WIDTH_DELAY=1\WIDTH_DATA=8 (clk, reset, enable, data_in, data_out);
  (* src = "./rtl/retardo_N.v:5" *)
  input clk;
  (* src = "./rtl/retardo_N.v:5" *)
  wire [7:0] \connect_wire[0] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire [7:0] \connect_wire[1] ;
  (* src = "./rtl/retardo_N.v:8" *)
  input [7:0] data_in;
  (* src = "./rtl/retardo_N.v:9" *)
  output [7:0] data_out;
  (* src = "./rtl/retardo_N.v:7" *)
  input enable;
  (* src = "./rtl/retardo_N.v:6" *)
  input reset;
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=8  _0_ (
    .clk(clk),
    .clr(reset),
    .d(data_in),
    .en(enable),
    .q(\connect_wire[1] )
  );
  assign \connect_wire[0]  = data_in;
  assign data_out = \connect_wire[1] ;
endmodule

(* dynports =  1  *)
(* src = "./rtl/retardo_N.v:5" *)
module \$paramod\retardo_N\WIDTH_DELAY=7\WIDTH_DATA=1 (clk, reset, enable, data_in, data_out);
  (* src = "./rtl/retardo_N.v:5" *)
  input clk;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[0] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[1] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[2] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[3] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[4] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[5] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[6] ;
  (* src = "./rtl/retardo_N.v:5" *)
  wire \connect_wire[7] ;
  (* src = "./rtl/retardo_N.v:8" *)
  input data_in;
  (* src = "./rtl/retardo_N.v:9" *)
  output data_out;
  (* src = "./rtl/retardo_N.v:7" *)
  input enable;
  (* src = "./rtl/retardo_N.v:6" *)
  input reset;
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _0_ (
    .clk(clk),
    .clr(reset),
    .d(data_in),
    .en(enable),
    .q(\connect_wire[1] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _1_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[1] ),
    .en(enable),
    .q(\connect_wire[2] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _2_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[2] ),
    .en(enable),
    .q(\connect_wire[3] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _3_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[3] ),
    .en(enable),
    .q(\connect_wire[4] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _4_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[4] ),
    .en(enable),
    .q(\connect_wire[5] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _5_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[5] ),
    .en(enable),
    .q(\connect_wire[6] )
  );
  (* src = "./rtl/retardo_N.v:27" *)
  \$paramod\register\N=1  _6_ (
    .clk(clk),
    .clr(reset),
    .d(\connect_wire[6] ),
    .en(enable),
    .q(\connect_wire[7] )
  );
  assign \connect_wire[0]  = data_in;
  assign data_out = \connect_wire[7] ;
endmodule

(* dynports =  1  *)
(* src = "./rtl/rom8.v:4" *)
module \$paramod\rom8\WIDTH_COEF0=8\N_TAPS=16 (clk, clr, add, q);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  (* src = "./rtl/rom8.v:5" *)
  input [2:0] add;
  (* src = "./rtl/rom8.v:4" *)
  input clk;
  (* src = "./rtl/rom8.v:4" *)
  input clr;
  (* src = "./rtl/rom8.v:6" *)
  output [7:0] q;
  NAND2X1 _06_ (
    .A(add[1]),
    .B(add[0]),
    .Y(_05_)
  );
  XNOR2X1 _07_ (
    .A(add[2]),
    .B(_05_),
    .Y(_02_)
  );
  NAND3X1 _08_ (
    .A(add[1]),
    .B(add[0]),
    .C(add[2]),
    .Y(_04_)
  );
  INVX1 _09_ (
    .A(_04_),
    .Y(_03_)
  );
  INVX1 _10_ (
    .A(add[0]),
    .Y(_00_)
  );
  XOR2X1 _11_ (
    .A(add[1]),
    .B(add[0]),
    .Y(_01_)
  );
  DFFPOSX1 _12_ (
    .CLK(clk),
    .D(_00_),
    .Q(q[0])
  );
  DFFPOSX1 _13_ (
    .CLK(clk),
    .D(_01_),
    .Q(q[1])
  );
  DFFPOSX1 _14_ (
    .CLK(clk),
    .D(_02_),
    .Q(q[2])
  );
  DFFPOSX1 _15_ (
    .CLK(clk),
    .D(_03_),
    .Q(q[3])
  );
  assign q[7:4] = 4'h0;
endmodule

(* dynports =  1  *)
(* top =  1  *)
(* src = "./rtl/FIR.v:23" *)
module FIR(clk, rst, din, dout);
  (* src = "./rtl/FIR.v:66" *)
  wire _0_;
  wire _1_;
  wire _2_;
  (* src = "./rtl/FIR.v:24" *)
  input clk;
  (* src = "./rtl/FIR.v:31" *)
  wire clock_chico;
  (* src = "./rtl/FIR.v:54" *)
  wire [2:0] contador_down;
  (* src = "./rtl/FIR.v:53" *)
  wire [2:0] contador_up;
  (* src = "./rtl/FIR.v:25" *)
  input [7:0] din;
  (* src = "./rtl/FIR.v:26" *)
  output [7:0] dout;
  (* init = 1'h0 *)
  (* src = "./rtl/FIR.v:43" *)
  wire enable_asr;
  (* src = "./rtl/FIR.v:44" *)
  wire enable_asr_delay;
  (* src = "./rtl/FIR.v:45" *)
  wire enable_mac_delay;
  (* src = "./rtl/FIR.v:33" *)
  wire [7:0] entrada_asr_uno;
  (* src = "./rtl/FIR.v:46" *)
  wire negado;
  (* src = "./rtl/FIR.v:24" *)
  input rst;
  (* src = "./rtl/FIR.v:35" *)
  wire [7:0] salida_asr_dos;
  (* src = "./rtl/FIR.v:34" *)
  wire [7:0] salida_asr_uno;
  (* src = "./rtl/FIR.v:37" *)
  wire [7:0] salida_delay_asr_dos;
  (* src = "./rtl/FIR.v:36" *)
  wire [7:0] salida_delay_asr_uno;
  (* src = "./rtl/FIR.v:41" *)
  wire [7:0] salida_mac;
  (* src = "./rtl/FIR.v:42" *)
  wire [7:0] salida_mac_delay;
  (* src = "./rtl/FIR.v:38" *)
  wire [7:0] salida_rom;
  (* src = "./rtl/FIR.v:39" *)
  wire [7:0] salida_rom_delay;
  (* src = "./rtl/FIR.v:40" *)
  wire [8:0] salida_sumador;
  NOR2X1 _3_ (
    .A(contador_up[2]),
    .B(rst),
    .Y(_1_)
  );
  NOR2X1 _4_ (
    .A(contador_up[1]),
    .B(contador_up[0]),
    .Y(_2_)
  );
  AND2X2 _5_ (
    .A(_1_),
    .B(_2_),
    .Y(_0_)
  );
  INVX1 _6_ (
    .A(clock_chico),
    .Y(negado)
  );
  (* src = "./rtl/FIR.v:66" *)
  DFFPOSX1 _7_ (
    .CLK(clk),
    .D(_0_),
    .Q(enable_asr)
  );
  (* src = "./rtl/FIR.v:117" *)
  \$paramod\MAC\WIDTH_DATA=8\WIDTH_COEF0=8\WIDTH_MAC_OUT=8  MAC (
    .Adder(salida_sumador),
    .MAC_out(salida_mac),
    .ROM(salida_rom_delay),
    .clk(clk),
    .clr(enable_mac_delay)
  );
  (* src = "./rtl/FIR.v:56" *)
  \$paramod\asr8\WIDTH_DATA=8\N_TAPS=8  asr1 (
    .add(contador_up),
    .clk(clock_chico),
    .clr(rst),
    .d(entrada_asr_uno),
    .en(1'h1),
    .q(salida_asr_uno)
  );
  (* src = "./rtl/FIR.v:57" *)
  \$paramod\asr8\WIDTH_DATA=8\N_TAPS=8  asr2 (
    .add(contador_down),
    .clk(enable_asr_delay),
    .clr(rst),
    .d(salida_asr_uno),
    .en(negado),
    .q(salida_asr_dos)
  );
  (* src = "./rtl/FIR.v:60" *)
  \$paramod\counter_down\N=3  down_counter (
    .clk(clk),
    .clr(rst),
    .counter(contador_down)
  );
  (* src = "./rtl/FIR.v:62" *)
  \$paramod\divisor_clock\N_TAPS=16  generador_clock (
    .clock_in(clk),
    .clock_out(clock_chico),
    .rst(rst)
  );
  (* src = "./rtl/FIR.v:106" *)
  \$paramod\rom8\WIDTH_COEF0=8\N_TAPS=16  memoria (
    .add(contador_up),
    .clk(clk),
    .clr(rst),
    .q(salida_rom)
  );
  (* src = "./rtl/FIR.v:51" *)
  \$paramod\register\N=8  registro_entrada (
    .clk(clock_chico),
    .clr(rst),
    .d(din),
    .en(1'h1),
    .q(entrada_asr_uno)
  );
  (* src = "./rtl/FIR.v:131" *)
  \$paramod\register\N=8  registro_salida (
    .clk(clock_chico),
    .clr(rst),
    .d(salida_mac_delay),
    .en(1'h1),
    .q(dout)
  );
  (* src = "./rtl/FIR.v:89" *)
  \$paramod\retardo_N\WIDTH_DELAY=1\WIDTH_DATA=8  retardo_asr_1 (
    .clk(clk),
    .data_in(salida_asr_uno),
    .data_out(salida_delay_asr_uno),
    .enable(1'h1),
    .reset(rst)
  );
  (* src = "./rtl/FIR.v:95" *)
  \$paramod\retardo_N\WIDTH_DELAY=1\WIDTH_DATA=8  retardo_asr_2 (
    .clk(clk),
    .data_in(salida_asr_dos),
    .data_out(salida_delay_asr_dos),
    .enable(1'h1),
    .reset(rst)
  );
  (* src = "./rtl/FIR.v:77" *)
  \$paramod\retardo_N\WIDTH_DELAY=7\WIDTH_DATA=1  retardo_clock_chico (
    .clk(clk),
    .data_in(enable_asr),
    .data_out(enable_asr_delay),
    .enable(1'h1),
    .reset(rst)
  );
  (* src = "./rtl/FIR.v:83" *)
  \$paramod\retardo_N\WIDTH_DELAY=10\WIDTH_DATA=1  retardo_clock_mac (
    .clk(clk),
    .data_in(enable_asr),
    .data_out(enable_mac_delay),
    .enable(1'h1),
    .reset(rst)
  );
  (* src = "./rtl/FIR.v:125" *)
  \$paramod\retardo_N\WIDTH_DELAY=1\WIDTH_DATA=8  retardo_mac_salida (
    .clk(clk),
    .data_in(salida_mac),
    .data_out(salida_mac_delay),
    .enable(enable_mac_delay),
    .reset(rst)
  );
  (* src = "./rtl/FIR.v:111" *)
  \$paramod\retardo_N\WIDTH_DELAY=1\WIDTH_DATA=8  retardo_rom (
    .clk(clk),
    .data_in(salida_rom),
    .data_out(salida_rom_delay),
    .enable(1'h1),
    .reset(rst)
  );
  (* src = "./rtl/FIR.v:101" *)
  \$paramod\adder\N=8  sumador (
    .a(salida_delay_asr_uno),
    .b(salida_delay_asr_dos),
    .clk(clk),
    .suma(salida_sumador)
  );
  (* src = "./rtl/FIR.v:59" *)
  \$paramod\counter_up\N=3  up_counter (
    .clk(clk),
    .clr(rst),
    .counter(contador_up)
  );
endmodule
